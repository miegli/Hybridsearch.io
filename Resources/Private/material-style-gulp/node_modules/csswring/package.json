{
  "_args": [
    [
      {
        "raw": "csswring@^4.0.0",
        "scope": null,
        "escapedName": "csswring",
        "name": "csswring",
        "rawSpec": "^4.0.0",
        "spec": ">=4.0.0 <5.0.0",
        "type": "range"
      },
      "/Users/pamegli/dev/hybridsearch/source/material-style-1.5/material-style-gulp/node_modules/pleeease"
    ]
  ],
  "_from": "csswring@>=4.0.0 <5.0.0",
  "_id": "csswring@4.2.3",
  "_inCache": true,
  "_location": "/csswring",
  "_nodeVersion": "6.0.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/csswring-4.2.3.tgz_1462154183300_0.7361410246230662"
  },
  "_npmUser": {
    "name": "hail2u",
    "email": "hail2u@gmail.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {
    "jsonfile": "2.4.0",
    "klaw": "1.3.1",
    "path-is-absolute": "1.0.1",
    "rimraf": "2.6.1"
  },
  "_requested": {
    "raw": "csswring@^4.0.0",
    "scope": null,
    "escapedName": "csswring",
    "name": "csswring",
    "rawSpec": "^4.0.0",
    "spec": ">=4.0.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pleeease"
  ],
  "_resolved": "https://registry.npmjs.org/csswring/-/csswring-4.2.3.tgz",
  "_shasum": "c4f318e7f839ab01c585e6ba78802cb067acaeb4",
  "_shrinkwrap": null,
  "_spec": "csswring@^4.0.0",
  "_where": "/Users/pamegli/dev/hybridsearch/source/material-style-1.5/material-style-gulp/node_modules/pleeease",
  "author": {
    "name": "Kyo Nagashima",
    "email": "hail2u@gmail.com",
    "url": "https://kyonagashima.com/"
  },
  "bin": {
    "csswring": "./bin/csswring.js"
  },
  "bugs": {
    "url": "https://github.com/hail2u/node-csswring/issues"
  },
  "dependencies": {
    "fs-extra": "^0.30.0",
    "minimist": "^1.1.0",
    "onecolor": "^2.4.0",
    "postcss": "^5.0.0"
  },
  "description": "Minify CSS file with source maps. That’s it.",
  "devDependencies": {
    "nodeunit": "^0.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "c4f318e7f839ab01c585e6ba78802cb067acaeb4",
    "tarball": "https://registry.npmjs.org/csswring/-/csswring-4.2.3.tgz"
  },
  "files": [
    "bin",
    "index.js",
    "lib",
    "tasks"
  ],
  "gitHead": "711edb445440f1b8a519815e30bc0ba3b5b3357b",
  "homepage": "https://github.com/hail2u/node-csswring",
  "keywords": [
    "css",
    "gruntplugin",
    "minification",
    "postcss-plugin"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "hail2u",
      "email": "kyo@hail2u.net"
    }
  ],
  "name": "csswring",
  "optionalDependencies": {},
  "readme": "CSSWring\n========\n\nMinify CSS file with source maps. That’s it.\n\nWritten with [PostCSS][1].\n\n\nSYNOPSIS\n--------\n\nFor readability, almost all CSS file contains a lot of white spaces, extra\nsemicolon, etc.:\n\n    .foo {\n      color: black;\n    }\n    \n    .bar {\n      margin-bottom: 0;\n      margin-left: auto;\n      margin-right: auto;\n      margin-top: 0;\n    }\n\nThis PostCSS plugin removes these non-essential parts of CSS file, like this:\n\n    .foo{color:black}.bar{margin:0 auto}\n\n\nINSTALL\n-------\n\n    $ npm install csswring\n\n\nUSAGE\n-----\n\nOf course, this package can be used as PostCSS plugin:\n\n    \"use strict\";\n    \n    var fs = require(\"fs\");\n    var postcss = require(\"postcss\");\n    \n    var css = fs.readFileSync(\"test.css\", \"utf8\");\n    postcss([\n      require(\"autoprefixer\")(),\n      require(\"csswring\")()\n    ]).process(css).then(function (result) {\n      fs.writeFileSync(\"test.min.css\", result.css);\n    });\n\n\n### As standard Node.js package\n\nTo minify `test.css` to `test.min.css`:\n\n    #!/usr/bin/env node\n    \n    \"use strict\";\n    \n    var fs = require(\"fs\");\n    var csswring = require(\"csswring\");\n    \n    var css = fs.readFileSync(\"test.css\", \"utf8\");\n    fs.writeFileSync(\"test.min.css\", csswring.wring(css).css);\n\n\n## As CLI Program\n\nThis package also installs a command line interface.\n\n    $ node ./node_modules/.bin/csswring --help\n    Usage: csswring [options] INPUT [OUTPUT]\n    \n    Description:\n      Minify CSS file with source maps. That’s only.\n    \n    Options:\n          --sourcemap            Create source map file.\n          --preserve-hacks       Preserve some CSS hacks.\n          --remove-all-comments  Remove all comments.\n      -h, --help                 Show this message.\n      -v, --version              Print version information.\n    \n    Use a single dash for INPUT to read CSS from standard input.\n\nWhen PostCSS failed to parse INPUT, CLI shows a CSS parse error in GNU error\nformat instead of Node.js stack trace.\n\n\n### As Grunt Plugin\n\nThis package also installs a Grunt plugin. You can enable this plugin in\n`Gruntfile.js` of your project like that:\n\n    grunt.loadNpmTasks(\"csswring\");\n\nTo minify `src/css/**/*.css` to `build/css/**/*.min.css` with source map:\n\n    grunt.initConfig({\n      csswring: {\n        options: {\n          map: true\n        },\n    \n        main: {\n          cwd: \"src/css/\",\n          dest: \"build/css/\",\n          expand: true,\n          ext: \"min.css\",\n          src: [\n            \"**/*.css\"\n          ]\n        }\n      }\n    });\n\nThe `options` is completely same as [this package options][2].\n\nThis was not tested. I suggest using [`grunt-postcss`][3].\n\n\nMINIFICATIONS\n-------------\n\nCSSWring doesn’t remove only white spaces or comments, but also remove an\nunnecessary parts of CSS. See [minification details][4] in our GitHub Wiki.\n\n\nOPTIONS\n-------\n\n### preserveHacks\n\nBy default, CSSWring removes all unknown portion of CSS declaration that\nincludes some CSS hacks (e.g., underscore hacks and star hacks). If you want to\npreserve these hacks, pass `preserveHacks: true` to this module.\n\n    postcss([\n      csswring({\n        preserveHacks: true\n      })\n    ]).wring(css);\n\n\n### removeAllComments\n\nBy default, CSSWring keeps a comment that start with `/*!`. If you want to\nremove all comments, pass `removeAllComments: true` to this module.\n\n    postcss([\n      csswring({\n        removeAllComments: true\n      })\n    ]).wring(css);\n\n\nAPI\n---\n\n### wring(css, [options])\n\nWring `css` with specified `options`.\n\nThe second argument is optional. The `options` is same as the second argument of\nPostCSS’s `process()` method. This is useful for generating source map.\n\n    var fs = require(\"fs\");\n    var csswring = require(\"csswring\");\n    \n    var css = fs.readFileSync(\"from.css\", \"utf8\");\n    var result = csswring.wring(css, {\n      map: {\n        inline: false\n      },\n      from: \"from.css\",\n      to: \"to.css\"\n    });\n    fs.writeFileSync(\"to.css\", result.css);\n    fs.writeFileSync(\"to.css.map\", result.map);\n\nSee also [Source Map section][5] in PostCSS document for more about this\n`options`.\n\nYou can also merge CSSWring options mentioned above to the second argument:\n\n    var result = csswring.wring(css, {\n      map: true,\n      preserveHacks: true\n    });\n\n\nLICENSE\n-------\n\nMIT: http://hail2u.mit-license.org/2014\n\n\n[1]: https://github.com/postcss/postcss\n[2]: #options\n[3]: https://github.com/nDmitry/grunt-postcss\n[4]: https://github.com/hail2u/node-csswring/wiki\n[5]: https://github.com/postcss/postcss#source-map\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/hail2u/node-csswring.git"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "version": "4.2.3"
}
