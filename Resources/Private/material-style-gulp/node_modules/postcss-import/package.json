{
  "_args": [
    [
      {
        "raw": "postcss-import@^7.0.0",
        "scope": null,
        "escapedName": "postcss-import",
        "name": "postcss-import",
        "rawSpec": "^7.0.0",
        "spec": ">=7.0.0 <8.0.0",
        "type": "range"
      },
      "/Users/pamegli/dev/hybridsearch/source/material-style-1.5/material-style-gulp/node_modules/pleeease"
    ]
  ],
  "_from": "postcss-import@>=7.0.0 <8.0.0",
  "_id": "postcss-import@7.1.3",
  "_inCache": true,
  "_location": "/postcss-import",
  "_nodeVersion": "4.1.1",
  "_npmUser": {
    "name": "moox",
    "email": "m@moox.io"
  },
  "_npmVersion": "2.14.4",
  "_phantomChildren": {
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "minimatch": "2.0.10",
    "once": "1.3.3",
    "path-is-absolute": "1.0.1"
  },
  "_requested": {
    "raw": "postcss-import@^7.0.0",
    "scope": null,
    "escapedName": "postcss-import",
    "name": "postcss-import",
    "rawSpec": "^7.0.0",
    "spec": ">=7.0.0 <8.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/pleeease"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-7.1.3.tgz",
  "_shasum": "92d1021af2a60df4ddc0acf3aa7ff7726a4d6c90",
  "_shrinkwrap": null,
  "_spec": "postcss-import@^7.0.0",
  "_where": "/Users/pamegli/dev/hybridsearch/source/material-style-1.5/material-style-gulp/node_modules/pleeease",
  "author": {
    "name": "Maxime Thirouin"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-import/issues"
  },
  "dependencies": {
    "glob": "^5.0.14",
    "object-assign": "^4.0.1",
    "postcss": "^5.0.2",
    "postcss-message-helpers": "^2.0.0",
    "resolve": "^1.1.6"
  },
  "description": "PostCSS plugin to import CSS files",
  "devDependencies": {
    "css-whitespace": "^1.1.1",
    "eslint": "^1.1.0",
    "tape": "^4.0.3"
  },
  "directories": {},
  "dist": {
    "shasum": "92d1021af2a60df4ddc0acf3aa7ff7726a4d6c90",
    "tarball": "https://registry.npmjs.org/postcss-import/-/postcss-import-7.1.3.tgz"
  },
  "eslintConfig": {
    "extends": "eslint:recommended",
    "ecmaFeatures": {
      "modules": true,
      "experimentalObjectRestSpread": true
    },
    "env": {
      "es6": true,
      "node": true
    },
    "rules": {
      "indent": [
        2,
        2
      ],
      "max-len": [
        2,
        80,
        4
      ],
      "no-multiple-empty-lines": [
        2,
        {
          "max": 1
        }
      ],
      "quotes": [
        2,
        "double"
      ],
      "semi": [
        2,
        "never"
      ],
      "comma-dangle": [
        2,
        "always-multiline"
      ],
      "comma-style": [
        2,
        "last"
      ],
      "brace-style": [
        2,
        "stroustrup"
      ],
      "dot-location": [
        2,
        "property"
      ],
      "computed-property-spacing": [
        2,
        "never"
      ],
      "object-curly-spacing": [
        2,
        "always"
      ],
      "array-bracket-spacing": [
        2,
        "always"
      ],
      "space-after-keywords": [
        2,
        "always"
      ],
      "space-before-blocks": [
        2,
        "always"
      ],
      "space-before-function-paren": [
        2,
        "never"
      ],
      "space-in-parens": [
        2,
        "never"
      ],
      "space-unary-ops": [
        2,
        {
          "words": true,
          "nonwords": false
        }
      ],
      "spaced-comment": [
        2,
        "always"
      ],
      "one-var": [
        2,
        "never"
      ],
      "no-bitwise": [
        2
      ],
      "prefer-const": [
        2
      ]
    }
  },
  "files": [
    "index.js"
  ],
  "gitHead": "d7ddd5db03d9a2c458c2e2ef68009418d10ae6c3",
  "homepage": "https://github.com/postcss/postcss-import#readme",
  "keywords": [
    "css",
    "postcss",
    "postcss-plugin",
    "import",
    "node modules",
    "npm"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "moox",
      "email": "m@moox.io"
    }
  ],
  "name": "postcss-import",
  "optionalDependencies": {},
  "readme": "# postcss-import [![Travis Build Status](https://travis-ci.org/postcss/postcss-import.svg)](https://travis-ci.org/postcss/postcss-import) [![AppVeyor Build status](https://ci.appveyor.com/api/projects/status/u8l6u3lr6s5u5tpi?svg=true)](https://ci.appveyor.com/project/MoOx/postcss-import)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform `@import` rules by inlining content.\n\nThis plugin can consume local files, node modules or bower packages.\nTo resolve path of an `@import` rule, it can look into root directory\n(by default `process.cwd()`), `node_modules`, `web_modules`, `bower_components`\nor local modules.\n_When importing a module, it will looks for `index.css` or file referenced in\n`package.json` in the `style` field._\nYou can also provide manually multiples paths where to look at.\n\n**Notes:**\n\n- **This plugin should probably be used as the first plugin of your list. This way, other plugins will work on the AST as if there were only a single file to process, and will probably work as you can expect**.\n- This plugin works great with [postcss-url](https://github.com/postcss/postcss-url) plugin,\nwhich will allow you to adjust assets `url()` (or even inline them) after inlining imported files.\n- In order to optimize output, **this plugin will only import a file once** on a given scope (root, media query...).\nTests are made from the path & the content of imported files (using a hash table).\nIf this behavior is not what you want, look at `skipDuplicates` option\n\n## Installation\n\n```console\n$ npm install postcss-import\n```\n\n## Usage\n\nIf your stylesheets are not in the same place where you run postcss (`process.cwd()`), you will need to use `from` option to make relative imports work from input dirname.\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\n// css to be processed\nvar css = fs.readFileSync(\"css/input.css\", \"utf8\")\n\n// process css\nvar output = postcss()\n  .use(atImport())\n  .process(css, {\n    // `from` option is required so relative import can work from input dirname\n    from: \"css/input.css\"\n  })\n  .css\n\nconsole.log(output)\n```\n\nUsing this `input.css`:\n\n```css\n/* can consume `node_modules`, `web_modules`, `bower_components` or local modules */\n@import \"cssrecipes-defaults\"; /* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */\n\n@import \"normalize.css/normalize\"; /* == @import \"./bower_components/normalize.css/normalize.css\"; */\n\n@import \"css/foo.css\"; /* relative to stylesheets/ according to `from` option above */\n\n@import \"css/bar.css\" (min-width: 25em);\n\nbody {\n  background: black;\n}\n```\n\nwill give you:\n\n```css\n/* ... content of ./node_modules/my-css-on-npm/index.css */\n\n/* ... content of ./bower_components/my-css-on-bower/index.css */\n\n/* ... content of foo.css */\n\n@media (min-width: 25em) {\n/* ... content of bar.css */\n}\n\nbody {\n  background: black;\n}\n```\n\nCheckout [tests](test) for more examples.\n\n### Options\n\n#### `root`\n\nType: `String`  \nDefault: `process.cwd()`\n\nDefine the root where to resolve path (eg: place where `node_modules` and `bower_components` are). Should not be used that much.\n\n#### `path`\n\nType: `String|Array`  \nDefault: `process.cwd()` or _dirname of [the postcss `from`](https://github.com/postcss/postcss#node-source)_\n\nA string or an array of paths in where to look for files.  \n_Note: nested `@import` will additionally benefit of the relative dirname of imported files._\n\n#### `async`\n\nType: `Boolean`  \nDefault: `false`\n\nAllow to enable PostCSS async API usage. Before enabling this, check that your\nrunner allow async usage.\n_Note: this is not enabling async fs read yet._\n\n#### `transform`\n\nType: `Function`  \nDefault: `null`\n\nA function to transform the content of imported files. Take one argument (file content) & should return the modified content.\n\n#### `plugins`\n\nType: `Array`  \nDefault: `undefined`\n\nAn array of plugins to be applied on each imported file.\n\n#### `encoding`\n\nType: `String`  \nDefault: `utf8`\n\nUse if your CSS is encoded in anything other than UTF-8.\n\n#### `onImport`\n\nType: `Function`  \nDefault: `null`\n\nFunction called after the import process. Take one argument (array of imported files).\n\n#### `glob`\n\nType: `Boolean`  \nDefault: `false`\n\nSet to `true` if you want @import rules to parse glob patterns.\n\n#### `resolve`\n\nType: `Function`  \nDefault: `null`\n\nYou can overwrite the default path resolving way by setting this option, using the `resolve.sync(id, opts)` signature that [resolve.sync](https://github.com/substack/node-resolve#resolvesyncid-opts) has.\n\n#### `skipDuplicates`\n\nType: `Boolean`  \nDefault: `true`\n\nBy default, similar files (based on the same content) are being skipped.\nIt's to optimize output and skip similar files like `normalize.css` for example.\nIf this behavior is not what you want, just set this option to `false` to\ndisable it.\n\n#### `addDependencyTo`\n\nType: `Function`\nDefault: null\n\nAllow to generate and call a callback that take one argument, the object from\nwhich you need to call `addDependency` from.\nCalled whenever a file is imported, handy in a webpack workflow.\nIt's equivalent to `onImport` with the following code:\n\n```js\n{\n  onImport: function (files) {\n    files.forEach(this.addDependency)\n  }.bind(obj) // obj = the argument you should pass to `addDependencyTo()`\n}\n```\n\n#### Example with some options\n\n```js\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\nvar css = postcss()\n  .use(atImport({\n    path: [\"src/css\"]\n    transform: require(\"css-whitespace\")\n  }))\n  .process(cssString)\n  .css\n```\n\n---\n\n## CONTRIBUTING\n\n* ⇄ Pull requests and ★ Stars are always welcome.\n* For bugs and feature requests, please create an issue.\n* Pull requests must be accompanied by passing automated tests (`$ npm test`).\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-import.git"
  },
  "scripts": {
    "eslint": "eslint .",
    "tape": "tape test",
    "test": "npm run eslint && npm run tape"
  },
  "version": "7.1.3"
}
